pipeline {
    agent any

    tools {
        jdk 'jdk21'
    }

    environment {
        JAVA_HOME = "${tool 'jdk21'}"
        PATH = "${env.JAVA_HOME}/bin:${env.PATH}"
	PROJECT_ID = 'faniverse'
        CLUSTER_NAME = 'k8s'
        LOCATION = 'asia-northeast3-a'
        CREDENTIALS_ID = 'gke'
	SPRING_DATASOURCE_PASSWORD = credentials('SPRING_DATASOURCE_PASSWORD')
        SPRING_DATASOURCE_URL = credentials('SPRING_DATASOURCE_URL')
        SPRING_DATASOURCE_USERNAME = credentials('SPRING_DATASOURCE_USERNAME')
        GCP_BUCKET = credentials('GCP_BUCKET')
        GCP_PROJECT_ID = credentials('GCP_PROJECT_ID')
        GCP_STORAGE_CREDENTIALS_JSON = credentials('GCP_STORAGE_CREDENTIALS_JSON')
    }
    
    stages {
        stage('Clone repository') {
            steps {
                git branch: 'yerim', url: 'https://github.com/20211129/Faniverse-DevOps.git'
            }
        }
	    
        stage('Build Backend') {
            steps {
                dir('backend-repo/FaniverseBE') {
                    sh 'chmod +x gradlew'
                    sh './gradlew clean build'
                }
            }
        }
	    
        stage('Create .env file') {
            steps {
                script {
                    // .env 파일 초기화
                    sh 'echo "" > backend-repo/FaniverseBE/.env'

                    // 환경 변수 값을 .env 파일에 추가
                    sh """
                        echo "SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}" >> backend-repo/FaniverseBE/.env
                        echo "SPRING_DATASOURCE_USERNAME=${SPRING_DATASOURCE_USERNAME}" >> backend-repo/FaniverseBE/.env
                        echo "SPRING_DATASOURCE_PASSWORD=${SPRING_DATASOURCE_PASSWORD}" >> backend-repo/FaniverseBE/.env
                        echo "GCP_STORAGE_CREDENTIALS_JSON=${GCP_STORAGE_CREDENTIALS_JSON}" >> backend-repo/FaniverseBE/.env
                        echo "GCP_PROJECT_ID=${GCP_PROJECT_ID}" >> backend-repo/FaniverseBE/.env
                        echo "GCP_BUCKET=${GCP_BUCKET}" >> backend-repo/FaniverseBE/.env
                    """
                }
            }
        }
	    
        stage('Build Image') {
            steps {
                script {
                    // Docker 이미지 빌드
                    app = docker.build("yr20211129/faniverse_backend:latest", "backend-repo/FaniverseBE")
                }
            }
        }
	    
 	stage('Run Docker Container Locally') {
	    steps {
                script {
                    // 기존 컨테이너 삭제
                    sh 'docker rm -f faniverse-con'
                    
                    // Docker 컨테이너 실행
	            sh 'docker run -d --name faniverse-con -p 8081:8080 --env-file backend-repo/FaniverseBE/.env faniverse_backend:latest'

		    sh 'sleep 5'
		    sh 'docker ps -a'
		    sh 'docker logs faniverse-con'
                    echo "Docker container for the backend is running successfully."
                }
            }
        }
	    
        stage('Push image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'yr20211129') {
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }
        }

	stage('Configure GKE credentials') {
            steps {
                script {
                    // GKE 클러스터 인증 설정
                    sh """
                        gcloud container clusters get-credentials ${env.CLUSTER_NAME} --zone ${env.LOCATION} --project ${env.PROJECT_ID}
                    """
                }
            }
        }
	    
        stage('Deploy to Kubernetes') {
	    when {
	        branch 'main'
	    }
            steps {
		sh "sed -i 's/faniverse_backend:latest/faniverse_backend:${env.BUILD_ID}/g' backend-repo/FaniverseBE/deploy.yml"
		step([$class: 'KubernetesEngineBuilder', projectId: env.PROJECT_ID, clusterName: env.CLUSTER_NAME, location: env.LOCATION, manifestPattern: 'backend-repo/FaniverseBE/deploy.yml', credentialsId: env.CREDENTIALS_ID, verifyDeployments: true])
		    
		// 30초 쉬고 잘 작동하는지 확인
		sh 'sleep 30'
		sh 'kubectl get deployment'
		sh 'kubectl get svc'
		sh 'kubectl get pods'    
            }
        }
    }
}
