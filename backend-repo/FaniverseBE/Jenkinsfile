pipeline {
    agent any
    environment {
        // app 변수를 pipeline 전체에서 사용할 수 있도록 설정
        app = ''
    }

    stages {
        // 1. Git 저장소에서 코드 클론
        stage('Clone repository') {
            steps {
                git url: 'https://github.com/20211129/Faniverse-DevOps.git', branch: 'main'
            }
        }

        // 2. Docker 이미지 빌드
        stage('Build image') {
            steps {
                script {
                    // Docker 이미지를 빌드하고, 결과를 app 변수에 할당
                    app = docker.build("faniverse_backend:latest", "-f backend-repo/FaniverseBE/Dockerfile .")
                }
            }
        }

        // 3. Docker 이미지에서 테스트 실행 (빌드한 이미지를 사용하여 Gradle 테스트 실행)
        stage('Test image') {
            steps {
                script {
                    // Docker 컨테이너에서 Gradle로 테스트 실행
                    docker.image("faniverse_backend:latest").inside {
                        // Gradle Wrapper를 사용하여 테스트 실행
                        sh './gradlew test'
                    }
                }
            }
        }

        // 4. Docker 이미지를 Docker Hub로 푸시
        stage('Push image') {
            steps {
                script {
                    // Docker Hub에 이미지 푸시
                    docker.withRegistry('https://registry.hub.docker.com', 'yr20211129') {
                        // 이미지를 Docker Hub에 태그하고 푸시
                        app.push("${env.BUILD_NUMBER}")
                        app.push("latest")
                    }
                }
            }
        }
    }
}
